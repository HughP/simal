#summary Steps to go through for a release
#labels Phase-QA

= Pre-Requisites =

Before a release can be made a number of requirements must be met.

 * Check all CodeAuditing reports are satisfactory (satisfactory means there are no warnings from the code audit tools)
 * All [http://code.google.com/p/simal/issues/list?can=7&q=&colspec=ID+Type+Status+Priority+Milestone+Summary&x=priority&y=milestone&cells=tiles unverified issues] have been verified by someone other than the owner of that issue
 * All source code has been formatted according to the projects coding standards
 * All documentation has been updated to reflect the new features in this release

= Change src version numbers to reflect release candidate build =

We must first build a release candidate for testing. To do this we need to correctly set the version number. Usually this will mean changing the postfix from "-SNAPSHOT" to "-rc1", "-rc2", "rc3" etc.

 * in {{{pom.xml}}} change {{{<version>x.y.z[-POSTFIX]</version>}}}
 * in {{{src/main/resources/default.simal.properties}}} change {{{simal.version=x.y.z[-POSTFIX]}}}

At this early stage we will release all Simal module simultaneously and therefore we need to change the {{{pom.xml}}} as described in each module (there is currently no {{{default.simal.properties}}} file in modules other than core)

= Build the Binaries =

For each of the modules build the binaries.

= Tag SVN =

SVN should be tagged with the release number in the format simal_x_y_z_POSTFIX

= Upload to Google Code =

Upload the binaries to the downloads section of Google Code, making them a featured download.

If this is a RC release then previous RC releases should be deleted (they use up the storage quota and can be rebuilt from SVN if people need to do so).

= Test =

 * notify users/developers of new release candidate
 * as many people as possible should test the release candidate
 * all [http://code.google.com/p/simal/issues/list?can=6 closed issues awaiting] QA approval should be verified

= Vote =

Assuming that no critical errors are discovered during the testing phase we can now proceed with getting approval for the release.

A vote on the release is called on the contributor mailing list.

Assuming that the vote passes we can proceed. If it does not pass the reason(s) for the negative votes must be addressed.

= Change src version numbers =

We must now build a release package. To do this we need to correctly set the version number. Usually this will mean changing the postfix from "-rc*" to "-ga"

 * in {{{pom.xml}}} change {{{<version>x.y.z[-POSTFIX]</version>}}}
 * in {{{src/main/resources/default.simal.properties}}} change {{{simal.version=x.y.z[-POSTFIX]}}}

At this early stage we will release all Simal module simultaneously and therefore we need to change the {{{pom.xml}}} as described in each module (there is currently no {{{default.simal.properties}}} file in modules other than core)

= Tag SVN =

SVN needs to be tagged with the release information, typically, this will look something like:

"simal_x_y_z"

= Set up a maintenance branch =

We need a maintenance branch in SVN in case any bugs are found in the release. Create a branch called:

"simal_x_y_z"

Where z is one increment higher than the previous release.

= Build the release binaries =

For each of the modules build the binaries.

= Upload to Google Code =

Upload to the downloads section of Google Code, making it a featured download.

Deprecate the previous release and remove the featured downloads lable from it (but do not delete the release).

= Change src version numbers =

We must now set up SVN for development of the next release. To do this we need to correctly set the version number. Usually this will mean incrementing the minor version number and changing the postfix from "-ga" to "-dev"

 * in {{{pom.xml}}} change {{{<version>x.y.z[-POSTFIX]</version>}}}
 * in {{{src/main/resources/default.simal.properties}}} change {{{simal.version=x.y.z[-POSTFIX]}}}