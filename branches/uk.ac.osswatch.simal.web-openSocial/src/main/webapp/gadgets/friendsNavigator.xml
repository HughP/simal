<?xml version="1.0" encoding="UTF-8" ?>
<!--
  Copyright 2007 University of Oxford
  
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
  http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<Module>
  <ModulePrefs title="Friends Navigator">
    <Require feature="opensocial-0.7" />
  </ModulePrefs>
  <Content type="html">
    <![CDATA[      
<script>
gadgets.util.registerOnLoadHandler(init);
var viewerId = "1";
var ownerId = "1";

function init() {
 loadFriends();
}

function loadFriends() {
  sendRequestToServer([{"type" : "SET_STATE", "fileUrl" : "http://localhost:8880/simal-rest/allColleagues/person-" + ownerId + "/xml"}]);
  var req = opensocial.newDataRequest();
  req.add(req.newFetchPersonRequest('VIEWER'), 'viewer');
  req.add(req.newFetchPeopleRequest('VIEWER_FRIENDS'), 'viewerFriends');
  req.send(onLoadFriends);
}

var allPeople, viewerFriendData;
function onLoadFriends(data) {
  var viewer = data.get('viewer').getData();
  allPeople = data.get('viewerFriends').getData().asArray() || new Array();

  var html = '<ul>';
  for (var i = 0; i < allPeople.length; i++) {
   html += '<li class="name">' + allPeople[i].getDisplayName() + '</li>';
  }
  html += '</ul>';
  document.getElementById('friends').innerHTML = html;
}


// The following code has been pulled from the sample container
// in Apache Shindig and is Copyright the Apache Software Foundation
// It is a hack here to set the state URL for the friends request.

// TODO: This is gross, it needs to use the config just like the gadget js does
var socialDataPath = document.location.protocol + "//" + document.location.host
    + "/gadgets/socialdata";

function generateSecureToken() {
  return [ownerId, viewerId, "simal", "shindig"].join(":");
}

function sendRequestToServer(jsonRequest, opt_callback) {
  // TODO: Should re-use the jsoncontainer code somehow
  jsonRequest = gadgets.json.stringify(jsonRequest);
    
  token = generateSecureToken();
  var makeRequestParams = {
    "CONTENT_TYPE" : "JSON",
    "METHOD" : "POST",
    "AUTHORIZATION" : "SIGNED",
    "POST_DATA" : encodeValues({'request' : jsonRequest,
      'st' : token})};

  makeRequest(socialDataPath,
      function(data) {
        data = data.data;
        if (!data || data['error'] ||
            !data['responses'][0] || data['responses'][0]['error']) {
          alert("The request to the server caused an error.");
        } else {
          if (opt_callback) {
            opt_callback(data);
          }
        }
      },
      makeRequestParams);
};


// Xhr stuff that is copied from io.js.
// TODO: We should really get rid of the duplication
function makeXhr() {
  if (window.XMLHttpRequest) {
    return new XMLHttpRequest();
  } else if (window.ActiveXObject) {
    var x = new ActiveXObject("Msxml2.XMLHTTP");
    if (!x) {
      x = new ActiveXObject("Microsoft.XMLHTTP");
    }
    return x;
  }
};

function processResponse(url, callback, params, xobj) {
  if (xobj.readyState !== 4) {
    return;
  }
  if (xobj.status !== 200) {
    callback({errors : ["Error " + xobj.status] });
    return;
  }
  var txt = xobj.responseText;

    // We are using eval directly here because the outer response comes from a
  // trusted source, and json parsing is slow in IE.
  var data = eval("(" + txt + ")");
  var resp = {
    data: data
  };

  callback(resp);
};

function makeRequest(url, callback, params) {
  var xhr = makeXhr();
  xhr.open("POST", url, true);
  xhr.onreadystatechange = gadgets.util.makeClosure(
      null, processResponse, url, callback, params, xhr);
  xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
  xhr.send(params.POST_DATA);
};

function encodeValues(fields, opt_noEscaping) {
  var escape = !opt_noEscaping;

  var buf = [];
  var first = false;
  for (var i in fields) if (fields.hasOwnProperty(i)) {
    if (!first) {
      first = true;
    } else {
      buf.push("&");
    }
    buf.push(escape ? encodeURIComponent(i) : i);
    buf.push("=");
    buf.push(escape ? encodeURIComponent(fields[i]) : fields[i]);
  }
  return buf.join("");
};

</script>

      <div id='main'>
        Your friends:
        <div id='friends'></div>
      </div>
    ]]>
  </Content>
</Module>